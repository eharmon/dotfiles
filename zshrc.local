#### Paths

function python_paths {
    # Add any locally installed python binaries to the path, using the currently running default python
    if [[ $+commands[python] -eq 1 ]]
    then
        local PYTHON_BIN=$(python -m site --user-base)/bin
        if [[ -d $PYTHON_BIN ]];
        then
            PATH="$PYTHON_BIN:$PATH"
        fi
    fi
    # If we have explicit python 3, add that in front to prefer it
    if [[ $+commands[python3] -eq 1 ]]
    then
        local PYTHON_BIN=$(python3 -m site --user-base)/bin
        if [[ -d $PYTHON_BIN ]];
        then
            PATH="$PYTHON_BIN:$PATH"
        fi
    fi
}

# Very unlikely to need this immediately, so lazy load it
zsh-defer -a python_paths

#### Prompt Setup

# Shut off prompt themes, we're not ready for them yet
prompt off

# If we've got powerline installed in the path, find the bindings
if [[ $+commands[powerline] -eq 1 ]];
then
    # TODO: This is kinda slow
    pip_packages=$(pip show powerline-status | grep Location | sed 's/Location: //') 2>/dev/null
    zsh_powerline=$pip_packages/powerline/bindings/zsh/powerline.zsh
fi

if [[ ! -z "$zsh_powerline" && -e $zsh_powerline ]];
then
    source $zsh_powerline
else
    # Set prompt
    PROMPT='[ %F{34}%(!.%F{red}.)%n@%B%m%b%(!.%f.) ]:%U%~%u%(!.#.$) '

    # Set rprompt error string
    RPROMPT='%(?..[ %F{red}%?%f ])'
fi

#### Vars

# Tell our zshrc to pass -p to the vim options to open multiple files in tabs
VIM_OPTIONS='-p'

#### Includes

# Include hostname-specific magic if it exists
local DOMAIN=${HOST#*.}
if [ -e ~/.zshrc.$DOMAIN ]
then
    echo "Setting shell for $DOMAIN domain"
    source ~/.zshrc.$DOMAIN
fi

# Some bits to support extra features with multiplexors (tmux), if available
if [ ! -z "$TMUX" ]
then
    source ~/.zsh/zshrc.local.tmux
fi

#### Functions

# Title command which properly supports screen, overriding grml version
title_precmd() {
    # update VCS information
    (( ${+functions[vcs_info]} )) && vcs_info

    if [[ $TERM == screen* ]] ; then
        if [[ -n ${vcs_info_msg_1_} ]] ; then
            ESC_print ${vcs_info_msg_1_}
        else
            ESC_print "zsh"
        fi
    fi
    # adjust title of xterm
    # see http://www.faqs.org/docs/Linux-mini/Xterm-Title.html
    case $TERM in
        (xterm*|rxvt*|screen*)
            set_title ${(%):-"%n@%m: [%~]"}
            ;;
    esac
}

# Title command which properly support screen, overriding grml version
title_preexec () {
    # set hostname if not running on host with name 'grml'
    # TODO: Why?
    if [[ -n "$HOSTNAME" ]] && [[ "$HOSTNAME" != "$HOST" ]] ; then
       NAME="@$HOSTNAME"
    fi
    # get the name of the program currently running and hostname of local machine
    # set screen window title if running in a screen
    if [[ "$TERM" == screen* ]] ; then
        # local CMD=${1[(wr)^(*=*|sudo|ssh|-*)]}       # don't use hostname
        local CMD="${1[(wr)^(*=*|sudo|ssh|-*)]}$NAME" # use hostname
        ESC_print ${CMD}
    fi
    # adjust title of xterm
    #[[ ${NOTITLE} -gt 0 ]] && return 0
    case $TERM in
        (xterm*|rxvt*|screen*)
            set_title "${(%):-"%n@%m:"}" "[$1]"
            ;;
    esac
}

# Install precmd and preexec functions on the stack
typeset -ga precmd_functions
typeset -ga preexec_functions
precmd_functions+='title_precmd'
preexec_functions+='title_preexec'

# zsh has native support directory substitution, but this gives us even more power
scd() {
    if [ -n "$1" ]; then
        cd $(echo $PWD | sed "$1")
    else
        echo "Give me a substitution!"
    fi
}

# Mount a disk image and try to CD into the most logical partition
if [[ $+commands[hdiutil] -eq 1 ]]
then
    hdicd() {
        output=$(hdiutil mount $1)
        print $output
        cd $(echo $output | tail -n 1 | awk '{print $3}')
    }
fi

# Copy a file from remote directly into the paste buffer
if [[ $+commands[pbcopy] -eq 1 ]]
then
    rpbcopy() {
        if [[ -n "$1" && -n "$2" ]]; then
            ssh $1 "cat $2" | pbcopy
        else
            echo "Must specify: pbcopy [user@]host filename"
        fi
    }
fi

#### Aliases

# Quick alias to make an HTTP server wherever we are
if [[ $+commands[python3] -eq 1 ]]
then
    alias tmphttp="python3 -m http.server 8000"
fi

# Give us 'wget' on machines which only have curl
if [[ $+commands[wget] -eq 0 && $+commands[curl] -eq 1 ]]
then
    alias wget="curl -OLRJw \"\n'%{filename_effective}' saved [%{size_download}]\n\""
fi

# Make it easier to type weechat
if [[ $+commands[weechat-curses] -eq 1 ]]
then
    alias weechat="weechat-curses"
fi

# dos2unix if it isn't on the system
if [[ $+commands[dos2unix] -eq 0 ]]
then
    alias dos2unix="perl -pi -e 's/\r\n|\n|\r/\n/g'"
fi

# And unix2dos
if [[ $+commands[unix2dos] -eq 0 ]]
then
    alias unix2dos="perl -pi -e 's/\r\n|\n|\r/\r\n/g'"
fi

# Cat plists, binary or otherwise
if [[ $+commands[plutil] -eq 1 ]]
then
    alias plcat="plutil -convert xml1 -o -"
fi

# Faster search with Spotlight
if [[ $+commands[mdfind] -eq 1 ]]
then
    alias search=mdfind -onlyin
fi

# Pretty-print JSON
if [[ $+commands[plutil] -eq 1 ]]
then
    alias ppj="plutil -convert json -r - -o -"
fi

# Use neovim
if [[ $+commands[nvim] -eq 1 ]]
then
    function vim {
        VIM_PLEASE_SET_TITLE='yes' command nvim ${VIM_OPTIONS} "$@"
    }
fi

#### Misc

# Use fancy history locking
is-at-least 4.3.7 && setopt HIST_FCNTL_LOCK

# Keep our auth_sock up to date. This works in tandem with a script in .ssh/rc
# which keeps the symlink updated every time we ssh again. If its set a symlink
# for us, let's pick that up
# TODO: Do we even need this anymore?
SOCK=$HOME/.cache/ssh_auth_sock_$HOST
if [ -e $SOCK ]
then
    export SSH_AUTH_SOCK=$SOCK
fi

# Case-insensitve matching on macOS as it usually has a case-insensitive filesystem
if [[ $OSTYPE == darwin* ]]
then
    zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
fi

# Set the lang, which we have to do now for some reason
export LANG=en_US.UTF-8

# Blue on black is impossible to see, change ls highlighting colors
# grml zshrc already does this for GNU userland, but not BSD
export LSCOLORS="gxfxcxdxbxegedabagacad"

# Setup a hotkey to quickly apply a regex to the current buffer line
autoload -U read-from-minibuffer

regex-edit () {
   # REPLY will be filled by read-from-minibuffer
   local REPLY temp
   read-from-minibuffer "Regex edit: "
   if [ -n $REPLY ]; then
      temp="$(echo $BUFFER | sed ${REPLY})" 2>/dev/null
      if [ $? = 0 ]; then
          BUFFER=$temp
      fi
   fi
}

zle -N regex-edit
bindkey "^[r" regex-edit

# If you're inside tmux, grep for a line in the current window and add it to the buffer
# This isn't entirely useful as is, but there's probably something nice we can do with this
read-pane () {
    local REPLY temp
    read-from-minibuffer "Regex search: "
    [[ ! -z $TMUX ]] && temp=$(tmux capture-pane -p | grep $REPLY | head -n 1)
    BUFFER="$BUFFER$temp"
}

zle -N read-pane
bindkey "^[t" read-pane

#### Autosuggestions

ZSH_AUTOSUGGEST_USE_ASYNC=1
ZSH_AUTOSUGGEST_MANUAL_REBIND=1

zsh-defer source -a +ms ~/.zsh/modules/zsh-autosuggestions/zsh-autosuggestions.zsh

#### Backdir

zsh-defer source ~/.zsh/modules/zsh-bd/bd.zsh

#### Syntax highlighting

# Setup plugins to load
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

# Define this as a function since we need to modify the settings after it's sourced
function load_syntax_highlighting {
    # Source syntax highlighting if it exists
    source ~/.zsh/modules/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

    # Main
    #ZSH_HIGHLIGHT_STYLES[default]:=none
    ZSH_HIGHLIGHT_STYLES[unknown-token]='fg=124'
    #ZSH_HIGHLIGHT_STYLES[reserved-word]:=fg=yellow
    ZSH_HIGHLIGHT_STYLES[alias]='fg=25'
    ZSH_HIGHLIGHT_STYLES[builtin]='fg=25'
    ZSH_HIGHLIGHT_STYLES[function]='fg=25'
    ZSH_HIGHLIGHT_STYLES[command]='fg=25'
    #ZSH_HIGHLIGHT_STYLES[precommand]:=fg=green,underline
    #ZSH_HIGHLIGHT_STYLES[commandseparator]:=none
    ZSH_HIGHLIGHT_STYLES[hashed-command]='fg=25'
    #ZSH_HIGHLIGHT_STYLES[path]:=underline
    ZSH_HIGHLIGHT_STYLES[globbing]='fg=28'
    ZSH_HIGHLIGHT_STYLES[history-expansion]='fg=25'
    #ZSH_HIGHLIGHT_STYLES[single-hyphen-option]:=none
    #ZSH_HIGHLIGHT_STYLES[double-hyphen-option]:=none
    #ZSH_HIGHLIGHT_STYLES[back-quoted-argument]:=none
    ZSH_HIGHLIGHT_STYLES[single-quoted-argument]='fg=250'
    ZSH_HIGHLIGHT_STYLES[double-quoted-argument]='fg=250'
    #ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]:=fg=cyan
    #ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]:=fg=cyan
    #ZSH_HIGHLIGHT_STYLES[assign]:=none
    # Brackets
    ZSH_HIGHLIGHT_STYLES[bracket-error]='fg=160,bold'
    ZSH_HIGHLIGHT_STYLES[bracket-level-1]='fg=28,bold'
    ZSH_HIGHLIGHT_STYLES[bracket-level-2]='fg=cyan,bold'
    #ZSH_HIGHLIGHT_STYLES[bracket-level-3]:=fg=magenta,bold}
    #ZSH_HIGHLIGHT_STYLES[bracket-level-4]:=fg=yellow,bold}
    ZSH_HIGHLIGHT_STYLES[bracket-level-5]='fg=25,bold'
    #ZSH_HIGHLIGHT_STYLES[cursor-matchingbracket]:=standout}
}

zsh-defer -a +pr load_syntax_highlighting

#### fzf for search

# Source fzf if it's installed
if [ -e $HOMEBREW_PREFIX/opt/fzf ]
then
    zsh-defer source $HOMEBREW_PREFIX/opt/fzf/shell/completion.zsh
    zsh-defer source $HOMEBREW_PREFIX/opt/fzf/shell/key-bindings.zsh
fi

